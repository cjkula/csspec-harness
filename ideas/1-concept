The component itself here looks enough like SASS that it's probably not worth sweating the difference. Syntax is by no means rigorous!


==== COMPONENT ====

TwoColumn(%gutter: 20px; %mobile-width: 768px) ->
  display: flex
  > * { width: 50% }
  > :first-child
    padding-right: %gutter / 2
  > :last-child
    padding-left: %gutter / 2
  @media screen and max-width: %mobile-width
    display: block
    > * { width: 100% }
    > :first-child
      padding-right: 0
    > :last-child
      padding-left: 0


==== TEST SUITE ====

fixture two-children {
  <body>
    <div class="container">
      <div id="col1"><div class="content"></div></div>
      <div id="col2"><div class="content"></div></div>
    </div>
  </body>
}

.container
  TwoColumn(%gutter: 10px)
  position: absolute
  width: 600px
  height: 400px

#col1, #col2
  height: 100%

.content
  width: 100%
  height: 100%

@use two-children

describe "desktop"

  @media screen { width: 769px; height: 600px }

  expect([#col1].top) to equal [#col2].top
  expect([#col1].width) to equal 300px
  expect([#col2].width) to equal 300px
  expect([#col1].height) to equal 400px
  expect([#col2].height) to equal 400px
  expect([#col1].padding-right) to equal 5px
  expect([#col2].padding-left) to equal 5px
  expect([#col2 .content].left - [#col1 .content].right) to equal 10px

describe "mobile"

  @media screen { width: 768px; height: 600px }

  expect([#col1].bottom) to equal [#col2].top
  expect([#col1].width) to equal 600px
  expect([#col2].width) to equal 600px
  expect([#col1].height) to equal 400px
  expect([#col2].height) to equal 400px
  expect([#col1].padding-right) to equal 0
  expect([#col2].padding-left) to equal 0
  expect([#col2 .content].left) to equal [#col1 .content].left

